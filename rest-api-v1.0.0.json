{
    "swagger": "2.0",
    "info": {
        "title": "callstats REST API",
        "description": "
        Monitor any real-time app with the callstats API. \n
        <b> We support only HTTP 2.0 enabled client endpoints</b>\n
        # Steps to integrate\n
        All the messages between the WebRTC endpoint and the REST API during the call are shown in the following figures, represented as sequence diagrams.\n
        ## Step 1\n
        At the beginning of the call, the service needs to be authenticated. When the authentication succeeds, a 'token' is sent back to the WebRTC endpoint. The received 'token' is then used for sending events and stats.\n
        <img src='images/step1-MessageFlowRESTAPI.png' />\n
        After the authentication process is completed, the endpoint initiates the monitoring process by a sending userJoined event along with the newly acquired 'token'. In case of success the response contains ucID. By acquiring ucID and 'token' the endpoint allowed to send events and stats.\n
        ## Step 2\n
        Throughout the duration of the call the WebRTC endpoint is obligated to send userAlive event in every 10 seconds. For initiating the call the endpoint requires to send fabricSetup event.\n
        <img src='images/step2-MessageFlowRESTAPI.png' />\n
        ## Step 3\n
        WebRTC endpoint can now send stats to REST API regularly and  all the stats messages are acknowledged.\n
        <img src='images/step3-MessageFlowRESTAPI.png' />\n
        ## Step 4\n
        The WebRTC endpoint informs the REST API about the end of the call by sending fabricTermination event. After the event is acknowledged, the endpoint sends the userLeft event, which removes the user from the conference. Once the last participant sends the userLeft event,  the conference is terminated.\n
        <img src='images/step4-MessageFlowRESTAPI.png' />\n

        ",
        "version": "1.0.0"
    },
    "host": "HOSTNAME",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/authenticate": {
            "post": {
                "externalDocs": {
                    "url": "//tools.ietf.org/html/rfc6749#section-4.1.3",
                    "description": "OAuth2 Access Token Request"
                },
                "summary": "Returns an access token",
                "description": "<b>HOSTNAME: auth.callstats.io</b><br />",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "grant_type",
                        "required": true,
                        "in": "formData",
                        "description": "Must be set to \"authorization_code\"",
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "required": true,
                        "in": "formData",
                        "description": "JWT signed ApplicationToken with alg set to ES256",
                        "type": "string"
                    },
                    {
                        "name": "client_id",
                        "required": true,
                        "in": "formData",
                        "description": "localID@appID ( localID is provided by the developer and MUST NOT be null or empty and Application ID is obtained from callstats.io)",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Authentication"
                ],
                "responses": {
                    "200": {
                        "description": "A new token",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationError"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationError"
                        }
                    }
                }
            }
        },
        "/v1/apps/{appID}/conferences/{confID}": {
            "post": {
                "summary": "UserJoined / Create conference Event",
                "description": "<b>HOSTNAME: events.callstats.io</b><br />This is the first step to add a new participant to the list of conference participants or start a new conference. If there are no participants in the given conference then a new conference will be created with the conferenceID provided.",
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Header name has to be 'Authorization' and value 'Bearer ' + token returned by authenticate (e.g. Authorization: Bearer mF_9.B5f-4.1JqM).",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "appID",
                        "in": "path",
                        "description": "Application ID is obtained from callstats.io",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "confID",
                        "in": "path",
                        "description": "Conference ID is generated by the origin server",
                        "required": true,
                        "type": "string",
                        "maxLength": 256
                    },
                    {
                        "name": "requestBody",
                        "in": "body",
                        "description": "request body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserJoinedMessageBody"
                        }
                    }
                ],
                "tags": [
                    "User Action Events"
                ],
                "responses": {
                    "200": {
                        "description": "Conference successfully joined/created.",
                        "schema": {
                            "$ref": "#/definitions/ucIDResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequest"
                        }
                    },
                    "401": {
                        "description": "Invalid authentication token.",
                        "schema": {
                            "$ref": "#/definitions/unauthorizedRequest"
                        }
                    },
                    "422": {
                        "description": "Invalid request body data.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequestBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internalServerResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "$ref": "#/definitions/serviceUnavailableResponse"
                        }
                    }
                }
            }
        },
        "/v1/apps/{appID}/conferences/{confID}/{ucID}/events/user/alive": {
            "post": {
                "summary": "UserAlive Event",
                "description": "<b>HOSTNAME: events.callstats.io</b><br />UserAlive makes sure that the user is present in the conference\n. We recommend you send this event every 10 seconds.\n If there is no userAlive event from a particular user for more than 30 seconds, we assume that the user has left the conference.",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Header name has to be 'Authorization' and value 'Bearer ' + token returned by authenticate (e.g. Authorization: Bearer mF_9.B5f-4.1JqM).",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "appID",
                        "in": "path",
                        "description": "Application ID is obtained from callstats.io",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "confID",
                        "in": "path",
                        "description": "Conference ID is generated by the origin server",
                        "required": true,
                        "type": "string",
                        "maxLength": 256
                    },
                    {
                        "name": "ucID",
                        "in": "path",
                        "description": "A unique conference ID returned by callstats.io, when a new user joins or a conference is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "requestBody",
                        "in": "body",
                        "description": "Request payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommonHeaderParams"
                        }
                    }
                ],
                "tags": [
                    "User Action Events"
                ],
                "responses": {
                    "200": {
                        "description": "Event successfully received.",
                        "schema": {
                            "$ref": "#/definitions/successResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequest"
                        }
                    },
                    "401": {
                        "description": "Invalid authentication token.",
                        "schema": {
                            "$ref": "#/definitions/unauthorizedRequest"
                        }
                    },
                    "422": {
                        "description": "Invalid request body data.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequestBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internalServerResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "$ref": "#/definitions/serviceUnavailableResponse"
                        }
                    }
                }
            }
        },
        "/v1/apps/{appID}/conferences/{confID}/{ucID}/events/userdetails": {
            "post": {
                "summary": "Submitting User Details Event",
                "description": "<b>HOSTNAME: events.callstats.io</b><br /> You can submit user details such as username using this event.",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Header name has to be 'Authorization' and value 'Bearer ' + token returned by authenticate (e.g. Authorization: Bearer mF_9.B5f-4.1JqM).",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "appID",
                        "in": "path",
                        "description": "Application ID is obtained from callstats.io",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "confID",
                        "in": "path",
                        "description": "Conference ID is generated by the origin server",
                        "required": true,
                        "type": "string",
                        "maxLength": 256
                    },
                    {
                        "name": "ucID",
                        "in": "path",
                        "description": "A unique conference ID returned by callstats.io, when a new user joins or a conference is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "requestBody",
                        "in": "body",
                        "description": "Request payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserDetailsBody"
                        }
                    }
                ],
                "tags": [
                    "User Action Events"
                ],
                "responses": {
                    "200": {
                        "description": "Event successfully received.",
                        "schema": {
                            "$ref": "#/definitions/successResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequest"
                        }
                    },
                    "401": {
                        "description": "Invalid authentication token.",
                        "schema": {
                            "$ref": "#/definitions/unauthorizedRequest"
                        }
                    },
                    "422": {
                        "description": "Invalid request body data.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequestBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internalServerResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "$ref": "#/definitions/serviceUnavailableResponse"
                        }
                    }
                }
            }
        },
        "/v1/apps/{appID}/conferences/{confID}/{ucID}/events/app/logs": {
            "post": {
                "summary": "Submitting Application Error Logs Event",
                "description": "<b>HOSTNAME: events.callstats.io</b><br /> You can submit application error logs using this event. You will be able to search for them and also categorize them.",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Header name has to be 'Authorization' and value 'Bearer ' + token returned by authenticate (e.g. Authorization: Bearer mF_9.B5f-4.1JqM).",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "appID",
                        "in": "path",
                        "description": "Application ID is obtained from callstats.io",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "confID",
                        "in": "path",
                        "description": "Conference ID is generated by the origin server",
                        "required": true,
                        "type": "string",
                        "maxLength": 256
                    },
                    {
                        "name": "ucID",
                        "in": "path",
                        "description": "A unique conference ID returned by callstats.io, when a new user joins or a conference is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "requestBody",
                        "in": "body",
                        "description": "Request payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AppLogBody"
                        }
                    }
                ],
                "tags": [
                    "special events"
                ],
                "responses": {
                    "200": {
                        "description": "Event successfully received.",
                        "schema": {
                            "$ref": "#/definitions/successResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequest"
                        }
                    },
                    "401": {
                        "description": "Invalid authentication token.",
                        "schema": {
                            "$ref": "#/definitions/unauthorizedRequest"
                        }
                    },
                    "422": {
                        "description": "Invalid request body data.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequestBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internalServerResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "$ref": "#/definitions/serviceUnavailableResponse"
                        }
                    }
                }
            }
        },
        "/v1/apps/{appID}/conferences/{confID}/{ucID}/events/user/left": {
            "post": {
                "summary": "UserLeft Event",
                "description": "<b>HOSTNAME: events.callstats.io</b><br />UserLeft event should be sent when a user leaves the conference.\nThis event removes the user from the list of conference participants.\nThe conference will be closed when all the users have left or timed out.",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Header name has to be 'Authorization' and value 'Bearer ' + token returned by authenticate (e.g. Authorization: Bearer mF_9.B5f-4.1JqM).",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "appID",
                        "in": "path",
                        "description": "Application ID is obtained from callstats.io",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "confID",
                        "in": "path",
                        "description": "Conference ID is generated by the origin server",
                        "required": true,
                        "type": "string",
                        "maxLength": 256
                    },
                    {
                        "name": "ucID",
                        "in": "path",
                        "description": "A unique conference ID returned by callstats.io, when a new user joins or a conference is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "requestBody",
                        "in": "body",
                        "description": "Request payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommonHeaderParams"
                        }
                    }
                ],
                "tags": [
                    "User Action Events"
                ],
                "responses": {
                    "200": {
                        "description": "Event successfully received.",
                        "schema": {
                            "$ref": "#/definitions/successResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequest"
                        }
                    },
                    "401": {
                        "description": "Invalid authentication token.",
                        "schema": {
                            "$ref": "#/definitions/unauthorizedRequest"
                        }
                    },
                    "422": {
                        "description": "Invalid request body data.",
                        "schema": {
                            "$ref": "#/definitions/invalidRequestBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internalServerResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "$ref": "#/definitions/serviceUnavailableResponse"
                        }
                    }
                }
            }
        },


      }, "definitions": {

        "AccessToken": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "-064b-4a76-8a2d-d686ec773992"
                },
                "expires_in": {
                    "type": "integer",
                    "example": 3600
                },
                "token_type": {
                    "type": "string",
                    "example": "bearer"
                }
            }
        },
        "AuthenticationError": {
          "type": "object",
          "properties": {
              "error": {
                  "type": "string",
                  "example": "invalid_request"
              },
              "errorReason": {
                  "type": "string",
                  "description": "Human readable error reason"
              },
              "urn:x-callstats:auth:errorActions": {
                  "description": "Suggested actions (e.g. retry, retry with new token, report error)",
                  "type": "array",
                  "items": {
                      "type": "object"
                  }
              }
          }
      },
      "ucIDResponse": {
          "type": "object",
          "required": [
              "status"
          ],
          "properties": {
              "status": {
                  "type": "string",
                  "default": "success",
                  "description": "Always \"success\""
              },
              "ucID": {
                  "type": "string",
                  "description": "Unique identifier"
              }
          }
      },
      "successResponse": {
          "type": "object",
          "required": [
              "status",
              "msg"
          ],
          "properties": {
              "status": {
                  "type": "string",
                  "default": "success",
                  "description": "Always \"success\""
              },
              "msg": {
                  "type": "string",
                  "description": "Error message"
              }
          }
      },
      "invalidRequest": {
          "type": "object",
          "required": [
              "status",
              "msg"
          ],
          "properties": {
              "status": {
                  "type": "string",
                  "default": "error",
                  "description": "Always \"error\""
              },
              "msg": {
                  "type": "string",
                  "description": "Error message"
              }
          }
      },
      "unauthorizedRequest": {
          "type": "object",
          "required": [
              "status",
              "msg"
          ],
          "properties": {
              "status": {
                  "type": "string",
                  "default": "error",
                  "description": "Always \"error\""
              },
              "msg": {
                  "type": "string",
                  "description": "Error message"
              }
          }
      },
      "invalidRequestBody": {
          "type": "object",
          "required": [
              "status",
              "msg"
          ],
          "properties": {
              "status": {
                  "type": "string",
                  "default": "error",
                  "description": "Always \"error\""
              },
              "msg": {
                  "type": "string",
                  "description": ""
              }
          }
      },
      "internalServerResponse": {
          "type": "object",
          "required": [
              "status",
              "msg"
          ],
          "properties": {
              "status": {
                  "type": "string",
                  "default": "error",
                  "description": "Always \"error\""
              },
              "msg": {
                  "type": "string",
                  "description": ""
              }
          }
      },
      "serviceUnavailableResponse": {
          "type": "object",
          "required": [
              "status",
              "msg"
          ],
          "properties": {
              "status": {
                  "type": "string",
                  "default": "error",
                  "description": "Always \"error\""
              },
              "msg": {
                  "type": "string",
                  "description": "Error message"
              }
          }
      },
      "UserJoinedMessageBody": {
          "type": "object",
          "required": [
              "localID",
              "deviceID",
              "timestamp",
              "endpointInfo"
          ],
          "properties": {
              "localID": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "It is provided by the developer and MUST NOT be null or empty."
              },
              "originID": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "ID of the endpoint connecting to the middlebox"
              },
              "deviceID": {
                  "type": "string",
                  "description": "Unique string persistent over device lifetime (e.g. Hash of android.provider.Settings.Secure.ANDROID_ID)"
              },
              "timestamp": {
                  "type": "number",
                  "description":"Unix timestamp with precision higher than 1 second (example: 1483228800.537)"
              },
              "endpointInfo": {
                  "$ref": "#/definitions/endpointInfo"
              }
          }
      },
      "endpointInfo": {
          "type": "object",
          "required": [
              "type"
          ],
          "properties": {
              "type": {
                  "type": "string",
                  "enum": [
                      "browser",
                      "native",
                      "plugin",
                      "middlebox"
                  ]
              },
              "os": {
                  "type": "string",
                  "description":"Operating System name"
              },
              "osVersion": {
                  "type": "string",
                  "description":"Operating System version"
              },
              "buildName": {
                  "type": "string",
                  "description":"Name of the platform that runs the application (example: Chrome or FireFox or Edge or Safari or WebView (https://developer.chrome.com/multidevice/webview/overview) or plugin or Electron or node-webkit(https://github.com/nwjs/nw.js/wiki))"
              },
              "buildVersion": {
                  "type": "string",
                  "description":"Version associated with the platform"
              },
              "appVersion": {
                  "type": "string",
                  "description":"Version of your application "
              }
          }
      },
      "CommonHeaderParams": {
          "type": "object",
          "required": [
              "localID",
              "deviceID",
              "timestamp"
          ],
          "properties": {
              "localID": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "It is provided by the developer and MUST NOT be null or empty."

              },
              "originID": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "ID of the endpoint connecting to the middlebox"
              },
              "deviceID": {
                  "type": "string",
                  "description": "Unique string persistent over device lifetime (e.g. Hash of android.provider.Settings.Secure.ANDROID_ID)"
              },
              "timestamp": {
                  "type": "number",
                  "description":"Unix timestamp with precision higher than 1 second (example: 1483228800.537)"
              }
          }
      },
      "UserDetailsBody": {
          "type": "object",
          "required": [
              "localID",
              "deviceID",
              "timestamp",
              "userName"
          ],
          "properties": {
              "localID": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "It is provided by the developer and MUST NOT be null or empty."

              },
              "originID": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "ID of the endpoint connecting to the middlebox"
              },
              "deviceID": {
                  "type": "string",
                  "description": "Unique string persistent over device lifetime (e.g. Hash of android.provider.Settings.Secure.ANDROID_ID)"
              },
              "timestamp": {
                  "type": "number",
                  "description":"Unix timestamp with precision higher than 1 second (example: 1483228800.537)"
              },
              "userName": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "The name of the user."

              },
          }
      },
      "AppLogBody": {
          "type": "object",
          "required": [
              "localID",
              "deviceID",
              "timestamp",
              "level",
              "message",
              "messageType"
          ],
          "properties": {
              "localID": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "It is provided by the developer and MUST NOT be null or empty."

              },
              "originID": {
                  "type": "string",
                  "maxLength": 128,
                  "description": "ID of the endpoint connecting to the middlebox"
              },
              "deviceID": {
                  "type": "string",
                  "description": "Unique string persistent over device lifetime (e.g. Hash of android.provider.Settings.Secure.ANDROID_ID)"
              },
              "timestamp": {
                  "type": "number",
                  "description":"Unix timestamp with precision higher than 1 second (example: 1483228800.537)"
              },
              "connectionID": {
                  "type": "string",
                  "description":"Unique identifier (example: Hash of Source IP||Source Port||Destination IP||Destination Port||Transport Protocol) of connection between two endpoints. This identifier should remain the same throughout the life-time of the connection. "
              },
              "level": {
                  "type": "string",
                  "enum":["debug", "info", "warn", "error", "fatal"]
              },
              "message": {
                  "type": "string",
                  "description":"Application error message"
              },
              "messageType": {
                  "type": "string",
                  "enum":["text", "json", "domError"]
              }
          }
      },
}

}
